{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPhcG6byPEw8wFB01U9WMCs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jamshedulhaquesheikh00/Jamshed_Ul_Haque_Sheikh_April_codings_nights_0001/blob/main/02_intermediate.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Control Flow for Console"
      ],
      "metadata": {
        "id": "7NDX76jawCX0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# handout.md"
      ],
      "metadata": {
        "id": "TiU1LdpswLXI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Starter Code"
      ],
      "metadata": {
        "id": "cMs5Ff5FwQrR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def simple_if_else():\n",
        "    user_input = input(\"Enter a number: \")\n",
        "    try:\n",
        "        number = int(user_input)\n",
        "        if number > 10:\n",
        "            print(\"The number is greater than 10.\")\n",
        "        else:\n",
        "            print(\"The number is not greater than 10.\")\n",
        "    except ValueError:\n",
        "        print(\"Invalid input. Please enter a whole number.\")\n",
        "\n",
        "def if_elif_else():\n",
        "    grade_str = input(\"Enter your grade (A, B, C, D, or F): \").upper()\n",
        "    if grade_str == \"A\":\n",
        "        print(\"Excellent!\")\n",
        "    elif grade_str == \"B\":\n",
        "        print(\"Good job!\")\n",
        "    elif grade_str == \"C\":\n",
        "        print(\"Average.\")\n",
        "    elif grade_str == \"D\":\n",
        "        print(\"Needs improvement.\")\n",
        "    elif grade_str == \"F\":\n",
        "        print(\"Failed.\")\n",
        "    else:\n",
        "        print(\"Invalid grade entered.\")\n",
        "\n",
        "def while_loop_counter():\n",
        "    count_str = input(\"Enter a number to count down from: \")\n",
        "    try:\n",
        "        count = int(count_str)\n",
        "        while count >= 0:\n",
        "            print(count)\n",
        "            count -= 1\n",
        "        print(\"Blast off!\")\n",
        "    except ValueError:\n",
        "        print(\"Invalid input. Please enter a whole number.\")\n",
        "\n",
        "def for_loop_list():\n",
        "    items_str = input(\"Enter a list of items separated by spaces: \")\n",
        "    items = items_str.split()\n",
        "    print(\"You entered the following items:\")\n",
        "    for item in items:\n",
        "        print(f\"- {item}\")\n",
        "\n",
        "def for_loop_range():\n",
        "    limit_str = input(\"Enter a number to iterate up to: \")\n",
        "    try:\n",
        "        limit = int(limit_str)\n",
        "        print(f\"Numbers from 0 to {limit}:\")\n",
        "        for i in range(limit + 1):\n",
        "            print(i)\n",
        "    except ValueError:\n",
        "        print(\"Invalid input. Please enter a whole number.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"--- Simple if-else ---\")\n",
        "    simple_if_else()\n",
        "\n",
        "    print(\"\\n--- if-elif-else for grades ---\")\n",
        "    if_elif_else()\n",
        "\n",
        "    print(\"\\n--- while loop counter ---\")\n",
        "    while_loop_counter()\n",
        "\n",
        "    print(\"\\n--- for loop through a list ---\")\n",
        "    for_loop_list()\n",
        "\n",
        "    print(\"\\n--- for loop using range ---\")\n",
        "    for_loop_range()\\"
      ],
      "metadata": {
        "id": "AHOSQ4m9wXbg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Solution"
      ],
      "metadata": {
        "id": "zlr-zZ3PxTGt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def simple_if_else_solution():\n",
        "    user_input = input(\"Enter a number: \")\n",
        "    try:\n",
        "        number = int(user_input)\n",
        "        if number > 10:\n",
        "            print(f\"The number {number} is greater than 10.\")\n",
        "        else:\n",
        "            print(f\"The number {number} is not greater than 10.\")\n",
        "    except ValueError:\n",
        "        print(\"Invalid input. Please enter a whole number.\")\n",
        "\n",
        "def if_elif_else_solution():\n",
        "    grade_str = input(\"Enter your grade (A, B, C, D, or F): \").upper()\n",
        "    if grade_str == \"A\":\n",
        "        print(\"Grade A: Excellent!\")\n",
        "    elif grade_str == \"B\":\n",
        "        print(\"Grade B: Good job!\")\n",
        "    elif grade_str == \"C\":\n",
        "        print(\"Grade C: Average.\")\n",
        "    elif grade_str == \"D\":\n",
        "        print(\"Grade D: Needs improvement.\")\n",
        "    elif grade_str == \"F\":\n",
        "        print(\"Grade F: Failed.\")\n",
        "    else:\n",
        "        print(f\"Invalid grade entered: {grade_str}\")\n",
        "\n",
        "def while_loop_counter_solution():\n",
        "    count_str = input(\"Enter a number to count down from: \")\n",
        "    try:\n",
        "        count = int(count_str)\n",
        "        print(f\"Counting down from {count}:\")\n",
        "        while count >= 0:\n",
        "            print(count)\n",
        "            count -= 1\n",
        "        print(\"Blast off!\")\n",
        "    except ValueError:\n",
        "        print(\"Invalid input. Please enter a whole number.\")\n",
        "\n",
        "def for_loop_list_solution():\n",
        "    items_str = input(\"Enter a list of items separated by commas: \")\n",
        "    items = items_str.split(',')\n",
        "    items = [item.strip() for item in items]  # Remove leading/trailing spaces\n",
        "    print(\"You entered the following items:\")\n",
        "    for index, item in enumerate(items):\n",
        "        print(f\"{index + 1}. {item}\")\n",
        "\n",
        "def for_loop_range_solution():\n",
        "    limit_str = input(\"Enter a number to iterate up to: \")\n",
        "    try:\n",
        "        limit = int(limit_str)\n",
        "        print(f\"Numbers from 0 to {limit}:\")\n",
        "        for i in range(limit + 1):\n",
        "            print(i)\n",
        "    except ValueError:\n",
        "        print(\"Invalid input. Please enter a whole number.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"--- Simple if-else Solution ---\")\n",
        "    simple_if_else_solution()\n",
        "\n",
        "    print(\"\\n--- if-elif-else for grades Solution ---\")\n",
        "    if_elif_else_solution()\n",
        "\n",
        "    print(\"\\n--- while loop counter Solution ---\")\n",
        "    while_loop_counter_solution()\n",
        "\n",
        "    print(\"\\n--- for loop through a list Solution ---\")\n",
        "    for_loop_list_solution()\n",
        "\n",
        "    print(\"\\n--- for loop using range Solution ---\")\n",
        "    for_loop_range_solution()"
      ],
      "metadata": {
        "id": "aogAlyU8xtuG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Intro to Python"
      ],
      "metadata": {
        "id": "8g80mvYpyrb8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# handout.md"
      ],
      "metadata": {
        "id": "dc1xcKliyuSd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Starter Code"
      ],
      "metadata": {
        "id": "wV-v2v34ASbr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# This is a comment - Python uses '#' for single-line comments\n",
        "\n",
        "# Basic Output\n",
        "print(\"Hello, Python!\")\n",
        "\n",
        "# Variables and Data Types\n",
        "name = \"Alice\"  # String\n",
        "age = 30      # Integer\n",
        "height = 5.8  # Float\n",
        "is_student = False # Boolean\n",
        "my_list = [1, 2, \"three\"]  # List\n",
        "my_tuple = (4, 5, \"six\")  # Tuple\n",
        "my_dict = {\"name\": \"Bob\", \"age\": 25}  # Dictionary\n",
        "my_set = {7, 8, 9}  # Set\n",
        "\n",
        "print(\"\\n--- Variables and Data Types ---\")\n",
        "print(\"Name:\", name)\n",
        "print(\"Age:\", age)\n",
        "print(\"Height:\", height)\n",
        "print(\"Is student:\", is_student)\n",
        "print(\"List:\", my_list)\n",
        "print(\"Tuple:\", my_tuple)\n",
        "print(\"Dictionary:\", my_dict)\n",
        "print(\"Set:\", my_set)\n",
        "\n",
        "# Operators\n",
        "print(\"\\n--- Operators ---\")\n",
        "num1 = 10\n",
        "num2 = 3\n",
        "\n",
        "print(\"Addition:\", num1 + num2)\n",
        "print(\"Subtraction:\", num1 - num2)\n",
        "print(\"Multiplication:\", num1 * num2)\n",
        "print(\"Division:\", num1 / num2)\n",
        "print(\"Floor Division:\", num1 // num2)\n",
        "print(\"Modulo:\", num1 % num2)\n",
        "print(\"Exponentiation:\", num1 ** num2)\n",
        "\n",
        "print(\"Greater than:\", num1 > num2)\n",
        "print(\"Equal to:\", num1 == 10)\n",
        "print(\"Logical AND:\", True and False)\n",
        "print(\"Logical OR:\", True or False)\n",
        "print(\"Logical NOT:\", not True)\n",
        "\n",
        "# Control Flow - if, elif, else\n",
        "print(\"\\n--- Control Flow (if, elif, else) ---\")\n",
        "grade = 75\n",
        "if grade >= 90:\n",
        "    print(\"Grade: A\")\n",
        "elif grade >= 80:\n",
        "    print(\"Grade: B\")\n",
        "elif grade >= 70:\n",
        "    print(\"Grade: C\")\n",
        "elif grade >= 60:\n",
        "    print(\"Grade: D\")\n",
        "else:\n",
        "    print(\"Grade: F\")\n",
        "\n",
        "# Control Flow - for loop\n",
        "print(\"\\n--- Control Flow (for loop) ---\")\n",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "for fruit in fruits:\n",
        "    print(\"Fruit:\", fruit)\n",
        "\n",
        "# Control Flow - while loop\n",
        "print(\"\\n--- Control Flow (while loop) ---\")\n",
        "count = 0\n",
        "while count < 3:\n",
        "    print(\"Count:\", count)\n",
        "    count += 1\n",
        "\n",
        "# Functions\n",
        "print(\"\\n--- Functions ---\")\n",
        "def greet(person_name):\n",
        "    print(f\"Hello, {person_name}!\")\n",
        "\n",
        "greet(\"Charlie\")\n",
        "\n",
        "def add(a, b):\n",
        "    return a + b\n",
        "\n",
        "sum_result = add(5, 2)\n",
        "print(\"Sum:\", sum_result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BIYdNJJ1AXiv",
        "outputId": "700a4c5b-3c92-43fa-e9a4-77ee339031d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, Python!\n",
            "\n",
            "--- Variables and Data Types ---\n",
            "Name: Alice\n",
            "Age: 30\n",
            "Height: 5.8\n",
            "Is student: False\n",
            "List: [1, 2, 'three']\n",
            "Tuple: (4, 5, 'six')\n",
            "Dictionary: {'name': 'Bob', 'age': 25}\n",
            "Set: {8, 9, 7}\n",
            "\n",
            "--- Operators ---\n",
            "Addition: 13\n",
            "Subtraction: 7\n",
            "Multiplication: 30\n",
            "Division: 3.3333333333333335\n",
            "Floor Division: 3\n",
            "Modulo: 1\n",
            "Exponentiation: 1000\n",
            "Greater than: True\n",
            "Equal to: True\n",
            "Logical AND: False\n",
            "Logical OR: True\n",
            "Logical NOT: False\n",
            "\n",
            "--- Control Flow (if, elif, else) ---\n",
            "Grade: C\n",
            "\n",
            "--- Control Flow (for loop) ---\n",
            "Fruit: apple\n",
            "Fruit: banana\n",
            "Fruit: cherry\n",
            "\n",
            "--- Control Flow (while loop) ---\n",
            "Count: 0\n",
            "Count: 1\n",
            "Count: 2\n",
            "\n",
            "--- Functions ---\n",
            "Hello, Charlie!\n",
            "Sum: 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Solution"
      ],
      "metadata": {
        "id": "NHNVkhuTBbCo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution demonstrating concepts from Intro to Python handout\n",
        "\n",
        "# 1. Basic Output\n",
        "print(\"Welcome to the Python Introduction Solution!\")\n",
        "\n",
        "# 2. Variables and Data Types\n",
        "name = \"Eva\"\n",
        "age = 28\n",
        "temperature = 98.6\n",
        "is_active = True\n",
        "colors = [\"red\", \"green\", \"blue\"]\n",
        "point = (10, 20)\n",
        "info = {\"city\": \"Karachi\", \"country\": \"Pakistan\"}\n",
        "unique_numbers = {1, 3, 5}\n",
        "\n",
        "print(\"\\n--- Variables and Data Types ---\")\n",
        "print(f\"Name: {name} (Type: {type(name)})\")\n",
        "print(f\"Age: {age} (Type: {type(age)})\")\n",
        "print(f\"Temperature: {temperature} (Type: {type(temperature)})\")\n",
        "print(f\"Is Active: {is_active} (Type: {type(is_active)})\")\n",
        "print(f\"Colors: {colors} (Type: {type(colors)})\")\n",
        "print(f\"Point: {point} (Type: {type(point)})\")\n",
        "print(f\"Info: {info} (Type: {type(info)})\")\n",
        "print(f\"Unique Numbers: {unique_numbers} (Type: {type(unique_numbers)})\")\n",
        "\n",
        "# 3. Operators\n",
        "print(\"\\n--- Operators ---\")\n",
        "x = 15\n",
        "y = 4\n",
        "\n",
        "print(f\"{x} + {y} = {x + y}\")\n",
        "print(f\"{x} - {y} = {x - y}\")\n",
        "print(f\"{x} * {y} = {x * y}\")\n",
        "print(f\"{x} / {y} = {x / y}\")\n",
        "print(f\"{x} // {y} = {x // y}\")\n",
        "print(f\"{x} % {y} = {x % y}\")\n",
        "print(f\"{x} ** {y} = {x ** y}\")\n",
        "\n",
        "print(f\"{x} > {y}: {x > y}\")\n",
        "print(f\"{x} == 15: {x == 15}\")\n",
        "print(f\"True and False: {True and False}\")\n",
        "print(f\"True or False: {True or False}\")\n",
        "print(f\"not True: {not True}\")\n",
        "\n",
        "# 4. Control Flow\n",
        "print(\"\\n--- Control Flow ---\")\n",
        "\n",
        "# if, elif, else\n",
        "current_time = 9  # in hours (24-hour format)\n",
        "if current_time < 12:\n",
        "    greeting = \"Good morning\"\n",
        "elif current_time < 18:\n",
        "    greeting = \"Good afternoon\"\n",
        "else:\n",
        "    greeting = \"Good evening\"\n",
        "print(f\"It's {current_time}:00, {greeting}, {name}!\")\n",
        "\n",
        "# for loop\n",
        "print(\"\\nFavorite colors:\")\n",
        "for index, color in enumerate(colors):\n",
        "    print(f\"{index + 1}. {color}\")\n",
        "\n",
        "# while loop\n",
        "counter = 0\n",
        "print(\"\\nCounting to 3:\")\n",
        "while counter < 4:\n",
        "    print(counter)\n",
        "    counter += 1\n",
        "\n",
        "# 5. Functions\n",
        "print(\"\\n--- Functions ---\")\n",
        "\n",
        "def describe_city(city, country=\"Unknown\"):\n",
        "    \"\"\"Prints a description of the given city.\"\"\"\n",
        "    print(f\"{city} is located in {country}.\")\n",
        "\n",
        "describe_city(\"Karachi\", \"Pakistan\")\n",
        "describe_city(\"Tokyo\")\n",
        "\n",
        "def multiply(a, b):\n",
        "    \"\"\"Returns the product of two numbers.\"\"\"\n",
        "    return a * b\n",
        "\n",
        "product = multiply(5, 6)\n",
        "print(f\"The product of 5 and 6 is: {product}\")\n",
        "\n",
        "# 6. Indentation (already demonstrated in the code structure)\n",
        "\n",
        "# 7. Comments (already demonstrated in the code structure)\n",
        "\n",
        "print(\"\\n--- End of Python Introduction Solution ---\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B8aUZn7eBeHm",
        "outputId": "51537ffc-24b7-4537-e981-c262bdeb9eea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to the Python Introduction Solution!\n",
            "\n",
            "--- Variables and Data Types ---\n",
            "Name: Eva (Type: <class 'str'>)\n",
            "Age: 28 (Type: <class 'int'>)\n",
            "Temperature: 98.6 (Type: <class 'float'>)\n",
            "Is Active: True (Type: <class 'bool'>)\n",
            "Colors: ['red', 'green', 'blue'] (Type: <class 'list'>)\n",
            "Point: (10, 20) (Type: <class 'tuple'>)\n",
            "Info: {'city': 'Karachi', 'country': 'Pakistan'} (Type: <class 'dict'>)\n",
            "Unique Numbers: {1, 3, 5} (Type: <class 'set'>)\n",
            "\n",
            "--- Operators ---\n",
            "15 + 4 = 19\n",
            "15 - 4 = 11\n",
            "15 * 4 = 60\n",
            "15 / 4 = 3.75\n",
            "15 // 4 = 3\n",
            "15 % 4 = 3\n",
            "15 ** 4 = 50625\n",
            "15 > 4: True\n",
            "15 == 15: True\n",
            "True and False: False\n",
            "True or False: True\n",
            "not True: False\n",
            "\n",
            "--- Control Flow ---\n",
            "It's 9:00, Good morning, Eva!\n",
            "\n",
            "Favorite colors:\n",
            "1. red\n",
            "2. green\n",
            "3. blue\n",
            "\n",
            "Counting to 3:\n",
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "\n",
            "--- Functions ---\n",
            "Karachi is located in Pakistan.\n",
            "Tokyo is located in Unknown.\n",
            "The product of 5 and 6 is: 30\n",
            "\n",
            "--- End of Python Introduction Solution ---\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Lists and Dicts"
      ],
      "metadata": {
        "id": "_peja8puE-x3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# handout.md"
      ],
      "metadata": {
        "id": "f5MOvPk9FF0B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Solution.md"
      ],
      "metadata": {
        "id": "avC9Pv11FLaV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Demonstrating Lists in Python\n",
        "\n",
        "print(\"--- Lists ---\")\n",
        "\n",
        "# Creating a list\n",
        "my_list = [1, 2, 'hello', 3.14, True]\n",
        "print(f\"Created list: {my_list}\")\n",
        "\n",
        "# Accessing elements\n",
        "fruits = ['apple', 'banana', 'cherry']\n",
        "print(f\"First fruit: {fruits[0]}\")\n",
        "print(f\"Last fruit: {fruits[-1]}\")\n",
        "\n",
        "# Slicing lists\n",
        "numbers = [0, 1, 2, 3, 4, 5]\n",
        "print(f\"Slice [1:5]: {numbers[1:5]}\")\n",
        "print(f\"Slice [:3]: {numbers[:3]}\")\n",
        "print(f\"Slice [2:]: {numbers[2:]}\")\n",
        "print(f\"Copy [:]: {numbers[:]}\")\n",
        "\n",
        "# Modifying lists\n",
        "colors = ['red', 'green', 'blue']\n",
        "colors.append('yellow')\n",
        "colors.insert(1, 'orange')\n",
        "colors[0] = 'lime'\n",
        "print(f\"Modified list: {colors}\")\n",
        "\n",
        "removed_color = colors.pop(2)\n",
        "print(f\"Popped element: {removed_color}, List: {colors}\")\n",
        "\n",
        "colors.remove('orange')\n",
        "print(f\"List after remove: {colors}\")\n",
        "\n",
        "# List operations\n",
        "list1 = [1, 2]\n",
        "list2 = [3, 4]\n",
        "combined_list = list1 + list2\n",
        "print(f\"Combined: {combined_list}\")\n",
        "repeated_list = list1 * 3\n",
        "print(f\"Repeated: {repeated_list}\")\n",
        "print(f\"Length: {len(combined_list)}\")\n",
        "print(f\"Is 3 in combined_list? {3 in combined_list}\")\n",
        "\n",
        "# Demonstrating Dictionaries in Python\n",
        "\n",
        "print(\"\\n--- Dictionaries ---\")\n",
        "\n",
        "# Creating a dictionary\n",
        "my_dict = {'name': 'Alice', 'age': 30, 'city': 'New York'}\n",
        "print(f\"Created dict: {my_dict}\")\n",
        "\n",
        "# Accessing values\n",
        "student = {'name': 'Bob', 'grade': 'A'}\n",
        "print(f\"Student name: {student['name']}\")\n",
        "print(f\"Student grade (get): {student.get('grade')}\")\n",
        "print(f\"Student major (get with default): {student.get('major', 'N/A')}\")\n",
        "\n",
        "# Modifying dictionaries\n",
        "person = {'name': 'Charlie', 'age': 25}\n",
        "person['occupation'] = 'Engineer'\n",
        "person['age'] = 26\n",
        "print(f\"Modified dict: {person}\")\n",
        "\n",
        "removed_age = person.pop('age')\n",
        "print(f\"Popped age: {removed_age}, Dict: {person}\")\n",
        "\n",
        "del person['name']\n",
        "print(f\"Dict after del: {person}\")\n",
        "\n",
        "# Dictionary operations and methods\n",
        "info1 = {'country': 'USA', 'language': 'English'}\n",
        "info2 = {'currency': 'USD'}\n",
        "combined_info = {**info1, **info2}\n",
        "print(f\"Combined info: {combined_info}\")\n",
        "\n",
        "print(f\"Keys: {combined_info.keys()}\")\n",
        "print(f\"Values: {combined_info.values()}\")\n",
        "print(f\"Items: {combined_info.items()}\")\n",
        "print(f\"'country' in combined_info: {'country' in combined_info}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y9_6nkzNFR00",
        "outputId": "79da6205-ae6e-417b-b8b8-e294981938a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Lists ---\n",
            "Created list: [1, 2, 'hello', 3.14, True]\n",
            "First fruit: apple\n",
            "Last fruit: cherry\n",
            "Slice [1:5]: [1, 2, 3, 4]\n",
            "Slice [:3]: [0, 1, 2]\n",
            "Slice [2:]: [2, 3, 4, 5]\n",
            "Copy [:]: [0, 1, 2, 3, 4, 5]\n",
            "Modified list: ['lime', 'orange', 'green', 'blue', 'yellow']\n",
            "Popped element: green, List: ['lime', 'orange', 'blue', 'yellow']\n",
            "List after remove: ['lime', 'blue', 'yellow']\n",
            "Combined: [1, 2, 3, 4]\n",
            "Repeated: [1, 2, 1, 2, 1, 2]\n",
            "Length: 4\n",
            "Is 3 in combined_list? True\n",
            "\n",
            "--- Dictionaries ---\n",
            "Created dict: {'name': 'Alice', 'age': 30, 'city': 'New York'}\n",
            "Student name: Bob\n",
            "Student grade (get): A\n",
            "Student major (get with default): N/A\n",
            "Modified dict: {'name': 'Charlie', 'age': 26, 'occupation': 'Engineer'}\n",
            "Popped age: 26, Dict: {'name': 'Charlie', 'occupation': 'Engineer'}\n",
            "Dict after del: {'occupation': 'Engineer'}\n",
            "Combined info: {'country': 'USA', 'language': 'English', 'currency': 'USD'}\n",
            "Keys: dict_keys(['country', 'language', 'currency'])\n",
            "Values: dict_values(['USA', 'English', 'USD'])\n",
            "Items: dict_items([('country', 'USA'), ('language', 'English'), ('currency', 'USD')])\n",
            "'country' in combined_info: True\n"
          ]
        }
      ]
    }
  ]
}